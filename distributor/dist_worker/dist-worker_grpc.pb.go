// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dist-worker.proto

package dist_worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pb "distributor/pb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LangServiceClient is the client API for LangService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LangServiceClient interface {
	RunJudge(ctx context.Context, in *pb.Submission, opts ...grpc.CallOption) (*pb.JudgeResult, error)
}

type langServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLangServiceClient(cc grpc.ClientConnInterface) LangServiceClient {
	return &langServiceClient{cc}
}

func (c *langServiceClient) RunJudge(ctx context.Context, in *pb.Submission, opts ...grpc.CallOption) (*pb.JudgeResult, error) {
	out := new(pb.JudgeResult)
	err := c.cc.Invoke(ctx, "/dist_worker.LangService/RunJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LangServiceServer is the server API for LangService service.
// All implementations must embed UnimplementedLangServiceServer
// for forward compatibility
type LangServiceServer interface {
	RunJudge(context.Context, *pb.Submission) (*pb.JudgeResult, error)
	mustEmbedUnimplementedLangServiceServer()
}

// UnimplementedLangServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLangServiceServer struct {
}

func (UnimplementedLangServiceServer) RunJudge(context.Context, *pb.Submission) (*pb.JudgeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJudge not implemented")
}
func (UnimplementedLangServiceServer) mustEmbedUnimplementedLangServiceServer() {}

// UnsafeLangServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LangServiceServer will
// result in compilation errors.
type UnsafeLangServiceServer interface {
	mustEmbedUnimplementedLangServiceServer()
}

func RegisterLangServiceServer(s grpc.ServiceRegistrar, srv LangServiceServer) {
	s.RegisterService(&LangService_ServiceDesc, srv)
}

func _LangService_RunJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LangServiceServer).RunJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dist_worker.LangService/RunJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LangServiceServer).RunJudge(ctx, req.(*pb.Submission))
	}
	return interceptor(ctx, in, info, handler)
}

// LangService_ServiceDesc is the grpc.ServiceDesc for LangService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LangService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dist_worker.LangService",
	HandlerType: (*LangServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJudge",
			Handler:    _LangService_RunJudge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dist-worker.proto",
}
